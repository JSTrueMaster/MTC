import React from "react";
import api from "src/api";
import { ExportToCsv } from 'ts-export-to-csv';
import { ToastContainer, toast } from 'react-toastify';
import { MenuItem, Box, Button, TextField, Select } from "@mui/material";
import * as XLSX from 'xlsx';

// グリッドモジュールのインポート
import {
  IgrDataGrid,
  IgrDataGridModule,
  IgrDataGridToolbar,
  IgrDataBindingEventArgs,
  IgrDataGridToolbarModule,
  IgrGridColumnOptionsModule,
  IgrTemplateCellUpdatingEventArgs,
  IgrGridActiveCellChangedEventArgs,
  IgrGridCellValueChangingEventArgs,

  IgrTextColumn,
  IgrComboBoxColumn,
  IgrDateTimeColumn,
  IgrNumericColumn,
  IgrTemplateColumn,
  IgrImageColumn,
  IgrTemplateCellInfo,
  IgrDataGridColumn,
  IIgrCellTemplateProps,
  IgrGridColumnsAutoGeneratedEventArgs,
} from 'igniteui-react-grids';

// importing localization data:
import { Localization } from 'igniteui-react-core';
import { DataGridLocalizationJa, DataGridSummariesLocalizationJa, DataGridDateTimeColumnLocalizationJa, DataGridMultiColumnComboBoxLocalizationJa } from 'src/constants/DataGridLocaleJa';

// register() メソッドの実行
IgrDataGridModule.register();
IgrDataGridToolbarModule.register();
IgrGridColumnOptionsModule.register();


export default class ReportMailTable extends React.Component<any, any> {

  public grid: IgrDataGrid;
  public toolbar: IgrDataGridToolbar;

  //const of style
  public defaultColumnMinWidth = 150
  public imgColumnWidth = 300
  public cornerRadius = 8
  public rowHeight = 40
  public currFeeData: any = []

  // pointer track
  public pointer = 0;
  public ROW_SIZE = 17; // Define the number of records to load per page

  constructor(props: any) {

    super(props);

    this.state = {
      data: null,
      csvData: null,
      loading: true,
      changedFeeData: {},
      storeName: props.storeName == '' ? localStorage.getItem('storeName').split(",")[0] : props.storeName,
    }

    this.onGetData()


    Localization.register("DataGrid-en", new DataGridLocalizationJa());
    Localization.register("DataVisualization-en", new DataGridSummariesLocalizationJa());
    Localization.register("Calendar-en", new DataGridDateTimeColumnLocalizationJa());
    Localization.register("MultiColumnComboBox-en", new DataGridMultiColumnComboBoxLocalizationJa());
  }

  componentDidUpdate(prevProps: any) {

    if (this.props.storeName !== prevProps.storeName) {
      // Perform any actions you need when storeName changes
      this.setState({ storeName: this.props.storeName });
      setTimeout(() => {
        console.log(this.state.storeName);
        
        this.pointer = 0;
        this.onGetData();
      }, 500);
    }
  }

  // loading more getting data
  public loadMore = async () => {
    this.pointer += this.ROW_SIZE
    this.onGetData()
  }
  // loading more getting data end

  //get data
  public onGetData = async () => {
    // loading params
    const params = {
      dataName: 'report',
      pointertrack: this.pointer,
      count: this.ROW_SIZE,
      storeName: this.state.storeName,
    };
    // loading params end
    const res = await api.store.getReport(params)
    // check getting data status
    if (!res.data.nextStatus) return;
    // check getting data status end
    // getting result show
    let final_results = res.data.data
    const changedTypeData = [
      ////////////// ①売上（収入） /////////////
      { '項目': { key: '', value: '貴金属' }, ...final_results[0] },
      { '項目': { key: '', value: '切手' }, ...final_results[1] },
      { '項目': { key: '', value: '古銭' }, ...final_results[2] },
      { '項目': { key: '', value: 'ブランド' }, ...final_results[3] },
      { '項目': { key: '', value: '金券' }, ...final_results[4] },
      { '項目': { key: '', value: '通貨' }, ...final_results[5] },
      { '項目': { key: '①売上（収入）', value: '携帯' }, ...final_results[6] },
      { '項目': { key: '', value: 'テレカ' }, ...final_results[7] },
      { '項目': { key: '', value: 'カメラ' }, ...final_results[8] },
      { '項目': { key: '', value: '酒' }, ...final_results[9] },
      { '項目': { key: '', value: 'その他' }, ...final_results[10] },
      { '項目': { key: '', value: '送料' }, '通期合計': 0.0, ...final_results[11] },
      { '項目': { key: '', value: 'その他収入' }, ...final_results[12] },
      { '項目': { key: '', value: '小計' }, ...final_results[13] },
      ////////////// ②売上（収入） /////////////
      { '項目': { key: '', value: '貴金属' }, ...final_results[14] },
      { '項目': { key: '', value: '切手' }, ...final_results[15] },
      { '項目': { key: '', value: '古銭' }, ...final_results[16] },
      { '項目': { key: '', value: 'ブランド' }, ...final_results[17] },
      { '項目': { key: '', value: '金券' }, ...final_results[18] },
      { '項目': { key: '', value: '通貨' }, ...final_results[19] },
      { '項目': { key: '②仕入（支出）', value: '携帯' }, ...final_results[20] },
      { '項目': { key: '', value: 'テレカ' }, ...final_results[21] },
      { '項目': { key: '', value: 'カメラ' }, ...final_results[22] },
      { '項目': { key: '', value: '酒' }, ...final_results[23] },
      { '項目': { key: '', value: 'その他' }, ...final_results[24] },
      { '項目': { key: '', value: '小計' }, ...final_results[25] },
      { '項目': { key: null, value: '売上総利益 （①-②）' }, ...final_results[26] },
      ////////////// ②売上（収入） /////////////
      { '項目': { key: '', value: '人件費' }, '通期合計': 0.0, ...final_results[27] },
      { '項目': { key: '', value: '荷造運賃' }, '通期合計': 0.0, ...final_results[28] },
      { '項目': { key: '', value: '通信費' }, '通期合計': 0.0, ...final_results[29] },
      { '項目': { key: '', value: '広告宣伝費' }, '通期合計': 0.0, ...final_results[30] },
      { '項目': { key: '', value: '消耗品費' }, '通期合計': 0.0, ...final_results[31] },
      { '項目': { key: '', value: '水道光熱費' }, '通期合計': 0.0, ...final_results[32] },
      { '項目': { key: '', value: '支払手数料' }, '通期合計': 0.0, ...final_results[33] },
      { '項目': { key: '', value: 'かんたん決済 手数料' }, '通期合計': 0.0, ...final_results[34] },
      { '項目': { key: '③経費（支出）', value: '地代家賃' }, '通期合計': 0.0, ...final_results[35] },
      { '項目': { key: '', value: '諸会費' }, '通期合計': 0.0, ...final_results[36] },
      { '項目': { key: '', value: '会議費' }, '通期合計': 0.0, ...final_results[37] },
      { '項目': { key: '', value: '賃借料' }, '通期合計': 0.0, ...final_results[38] },
      { '項目': { key: '', value: '新聞図書費' }, '通期合計': 0.0, ...final_results[39] },
      { '項目': { key: '', value: '旅費交通費' }, '通期合計': 0.0, ...final_results[40] },
      { '項目': { key: '', value: '損害保険料' }, '通期合計': 0.0, ...final_results[41] },
      { '項目': { key: '', value: 'その他' }, '通期合計': 0.0, ...final_results[42] },
      { '項目': { key: '', value: '小計' }, '通期合計': 0.0, ...final_results[43] },
      ///////////////////////////////////////////////////////////////////
      { '項目': { key: null, value: '営業損益 （①-②-③）' }, ...final_results[44] },
      { '項目': { key: null, value: 'マネージメントフィー' }, ...final_results[45] },
      { '項目': { key: null, value: 'オーナー収入' }, ...final_results[46] },
      { '項目': { key: null, value: 'ロイヤリティ' }, ...final_results[47] },
      { '項目': { key: null, value: '赤字補填' }, ...final_results[48] },
      { '項目': { key: null, value: 'マネージメントフィー（確認用）' }, ...final_results[49] },
      { '項目': { key: null, value: 'マネージメントフィー（差異）' }, ...final_results[50] },
    ]

    // getting result show
    this.setState({ data: changedTypeData })
    this.setState({ csvData: changedTypeData })
    this.setState({ loading: false });
    this.loadMore();
    // getting result show end
  }

  //render
  public render(): JSX.Element {

    return (
      <>
        <ToastContainer
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="light"
        />
        {this.state.loading && <div className="loading" />}
        <div className="gird-container h-full">
          {/* Header Button */}
          <Box className="flex flex-row justify-end">
            <IgrDataGridToolbar ref={this.onToolbarRef} columnChooser="true" />
            <Button component="span" sx={{
              minWidth: 160,
              height: 34,
              color: '#fff !important',
              ":hover": {
                color: '#000 !important',
              },
              fontFamily: 'Meiryo',
              background: '#0066FF',
              border: 1,
              borderColor: '#24BFF2',
              borderRadius: 22,
              boxShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',
              marginRight: 0.5,
            }}
              onClick={(event) => {
                event.preventDefault()
                this.onExportCSV("報告書（PL)")
              }}>
              Excelダウンロード
            </Button>

          </Box>

          <div className="igr-table h-full">
            {/* Table */}
            <IgrDataGrid
              ref={this.onGridRef}
              dataSource={this.state.data}

              editMode={0}
              summaryScope="none"
              // filterUIType="FilterRow"
              columnMovingMode={'none'}
              headerClickAction={'none'}
              autoGenerateColumns="true"
              selectionMode="MultipleRow"
              isColumnOptionsEnabled="true"
              groupHeaderDisplayMode="Combined"
              notifyOnAllSelectionChanges={true}
              activeCellChanged={this.onActiveCellChange}
              cellValueChanging={this.onCellValueChanging}
              columnsAutoGenerated={this.onColumnsAutoGenerated}

              cornerRadiusTopRight={this.cornerRadius}
              cornerRadiusTopLeft={this.cornerRadius}
              defaultColumnMinWidth={150}
              rowHeight={this.rowHeight}
              height="calc(100% - 40px)"
              headerBackground="#E6E6E6"
              headerTextColor="#4D4D4D"
              headerTextStyle="Meiryo"
              width="100%"
            >

              <IgrTemplateColumn field="項目" isEditable={false} width={'*>300'} cellUpdating={this.onCellUpdating} pinned={'left'}/>
              <IgrNumericColumn field="通期合計" isEditable={false} pinned={'left'} />
            </IgrDataGrid>

            {/* Bottom Button */}
            <Button className="flex my-2 saveBtn" sx={{
              width: 93,
              height: 37,
              fontFamily: 'Meiryo',
              color: '#1A1A1A',
              background: '#E6E6E6',
            }}
              onClick={this.onSaveChangedData}
            >保 存</Button>
          </div>

        </div>
      </>
    );
  }

  //IgrDataGrid methods
  public onGridRef = (grid: IgrDataGrid) => {
    if (!grid) { return; }

    this.grid = grid;
    if (!this.grid) {
      return;
    }

    if (this.toolbar !== null) {
      this.toolbar.targetGrid = this.grid;
    }

  }

  public onToolbarRef = (toolbar: IgrDataGridToolbar) => {
    this.toolbar = toolbar;
    if (this.toolbar !== null) {
      this.toolbar.targetGrid = this.grid;
    }
  }

  public onColumnsAutoGenerated = (s: IgrDataGrid, e: IgrGridColumnsAutoGeneratedEventArgs) => {

    const columnsArray = Array.from(e.columns);
    columnsArray.forEach((column: any) => {

      column.showGroupingSeparator = true
      column.positivePrefix = "¥"
      
    });

  }

  private onCellUpdating = (sender: IgrTemplateColumn, args: IgrTemplateCellUpdatingEventArgs) => {

    // args.content.parentElement.style.backgroundColor = '#dde2eb'
    args.content.parentElement.style.padding = '0'

    const content = args.content as HTMLDivElement
    let div1: HTMLDivElement | null = null;
    let div2: HTMLDivElement | null = null;

    const key = args.cellInfo.rowItem['項目'].key
    const value = args.cellInfo.rowItem['項目'].value

    if (key != null) {
      content.innerHTML = ""
      if (content.childElementCount === 0) {

        content.style.display = 'flex'

        div1 = document.createElement('div')
        div1.textContent = key
        div1.style.textAlign = 'center'
        div1.style.backgroundColor = '#dde2ebed'
        div1.style.width = '50%'
        div1.style.height = '40px'
        content.appendChild(div1)

        div2 = document.createElement('div')
        div2.textContent = value
        div2.style.width = '50%'
        div2.style.paddingLeft = '10px'
        div2.style.textAlign = 'left'


        if (value == '貴金属') {
          div1.style.borderTopWidth = '1px'
          div1.style.borderTopStyle = 'solid'
          div1.style.borderTopColor = 'lightgray'
        }

        content.appendChild(div2)
      }
    } else {
      content.textContent = ""
      content.textContent = value
      content.style.justifyContent = 'center'
    }

  }

  public onActiveCellChange(s: IgrDataGrid, e: IgrGridActiveCellChangedEventArgs) {

    if (s.activeCell !== null) {
      let rowIndex = s.activeCell.rowIndex;
      let dataItem = s.actualDataSource.getItemAtIndex(rowIndex)

      if (dataItem['項目']['value'] == 'マネージメントフィー（確認用）') {
        s.editMode = 1
      } else {
        s.editMode = 0
      }
    }
  }

  public onCellValueChanging = (s: IgrDataGrid, e: IgrGridCellValueChangingEventArgs) => {
    let rowIndex = s.activeCell.rowIndex;
    let columnKey = s.activeCell.columnUniqueKey
    const dataItem: any = s.actualDataSource.getItemAtIndex(rowIndex)
    let temp: any = {}
    temp['年月'] = columnKey
    temp['フィー'] = e.newValue

    this.currFeeData.push(temp)
    this.setState({ changedFeeData: this.currFeeData })
  }

  public onSaveChangedData = async () => {
    if (Object.keys(this.state.changedFeeData).length > 0) {
      const result = await api.store.createManagementFee(this.state.changedFeeData)
      if (result.data.success == true) {
        window.location.reload();
      }
    } else {
      toast.warning("変更された項目はありません。")
    }

  }

  public onExportCSV = (t: string) => {

    let data = [] as any
    this.state.data.forEach((element: any, index: number) => {
      const arr = [] as any
      const title  =[] as any
  
      Object.entries(element).map(([key, value]) => {
        if (key != '$hashCode') {
          if(index == 0)title.push(key)
          if(key == "項目"){
            if(index == 0)title.push("")
            Object.entries(value).map(([key, value]) => {
              if(value == null || value == ""){
                switch (index) {
                  case 0:
                    arr.push("①売上（収入）")
                    break;
                  case 14:
                    arr.push("②仕入（支出）")
                    break;
                  case 26:
                    arr.push("売上総利益 （①-②）")
                    break;
                  case 27:
                    arr.push("③経費（支出）")
                    break;
                  case 44:
                    arr.push("営業損益 （①-②-③）")
                    break;
                  case 45:
                    arr.push("マネージメントフィー")
                    break;
                  case 46:
                    arr.push("ロイヤリティ")
                    break;
                  case 47:
                    arr.push("赤字補填")
                    break;
                  case 48:
                    arr.push("マネージメントフィー（確認用）")
                    break;
                  case 49:
                    arr.push("マネージメントフィー（差異）")
                    break;
                  default:
                    arr.push("")
                    break;
                }
              }else arr.push(value)
              
            })
          }else{
            // eslint-disable-next-line no-case-declarations
            const v = (typeof value === 'number') ? value : Number(value);
            arr.push(this.currencyFormatter(v))
          }
        }
      })
      if(index == 0)data.push(title)
        data.push(arr)
      })

    const worksheet = XLSX.utils.aoa_to_sheet(data);
    // Merge cells A1 to B2 (A1:B2)
    const mergeRanges = [
      { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } }, // Merge A1:B1
      { s: { r: 1, c: 0 }, e: { r: 14, c: 0 } },  // Merge A2:A14
      { s: { r: 15, c: 0 }, e: { r: 26, c: 0 } },  // Merge A15:A26
      { s: { r: 27, c: 0 }, e: { r: 27, c: 1 } },  // Merge A27:B27
      { s: { r: 28, c: 0 }, e: { r: 44, c: 0 } },  // Merge A28:A44
      { s: { r: 45, c: 0 }, e: { r: 45, c: 1 } },  // Merge A45:B45
      { s: { r: 46, c: 0 }, e: { r: 46, c: 1 } },  // Merge A46:46
      { s: { r: 47, c: 0 }, e: { r: 47, c: 1 } },  // Merge A47:47
      { s: { r: 48, c: 0 }, e: { r: 48, c: 1 } },  // Merge A48:48
      { s: { r: 49, c: 0 }, e: { r: 49, c: 1 } },  // Merge A49:49
      { s: { r: 50, c: 0 }, e: { r: 50, c: 1 } },  // Merge A50:50
    ];
    // Cast the mergeRanges array to Range[] type
    worksheet['!merges'] = mergeRanges as XLSX.Range[];
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
    XLSX.writeFile(workbook, t+".xlsx");
  }
  
  public currencyFormatter = (number :  number | bigint) =>{
    return new Intl.NumberFormat('en-JP', { style: 'currency', currency: 'JPY' }).format(number)
  }

}

